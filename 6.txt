https://stepik.org/lesson/444816/step/4
countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy')
last = countries[-1]
print(last)
https://stepik.org/lesson/444816/step/5
primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71)
print(primes[:6])
https://stepik.org/lesson/444816/step/6
countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
print(countries[2:])
https://stepik.org/lesson/444816/step/7
countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
print(countries[:-3])
https://stepik.org/lesson/444816/step/8
countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
print(countries[3:-2])
https://stepik.org/lesson/444816/step/9
countries = ('Romania', 'Poland', 'Estonia', 'Bulgaria', 'Slovakia', 'Slovenia', 'Hungary')
number = len(countries)
print(number)
https://stepik.org/lesson/444816/step/10
numbers = (12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324)
result = min(numbers) + max(numbers)
print(result)
https://stepik.org/lesson/444816/step/11
countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy')
index = countries.index('Slovenia')
print(index)
https://stepik.org/lesson/444816/step/12
countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Spain', 'Cameroon')
number = countries.count('Spain')
print(number)
https://stepik.org/lesson/444816/step/13
numbers1 = (1, 2, 3)
numbers2 = (6,)
numbers3 = (7, 8, 9, 10, 11, 12, 13)

result = numbers1 * 2 + numbers2 * 9 + numbers3
print(result)
https://stepik.org/lesson/444816/step/14
city_name = input()
city_year = int(input())
city = (city_name, city_year)
print(city)
https://stepik.org/lesson/444816/step/15
tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (), ('d',), ('', ''), ()]
non_empty_tuples = [t for t in tuples if len(t) > 0]
print(non_empty_tuples)
https://stepik.org/lesson/444816/step/16
tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
new_tuples = [t[:-1] + (100,) for t in tuples]
print(new_tuples)
https://stepik.org/lesson/443990/step/4
from functools import reduce
import operator

numbers = (2, 3, 5, 7, -11, 13, 17, 19, 23, 29, 31, -6, 41, 43, 47, 53, 59, 61, -96, 71, 1000, -1)
product = reduce(operator.mul, numbers)
print(product)
https://stepik.org/lesson/443990/step/5
data = 'Python для продвинутых!'
tuple_of_chars = tuple(data)
print(tuple_of_chars)
https://stepik.org/lesson/443990/step/6
poet_data = ('Пушкин', 1799, 'Москва')
print(poet_data)
https://stepik.org/lesson/443990/step/7
numbers = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))

averages = [sum(t) / len(t) for t in numbers]
print(averages)
https://stepik.org/lesson/443990/step/8
# Чтение входных данных
a = int(input())
b = int(input())
c = int(input())

# Вычисление координат вершины параболы
x_vertex = -b / (2 * a)
y_vertex = (4 * a * c - b * b) / (4 * a)

# Вывод координат вершины
print(f"({x_vertex}, {y_vertex})")
https://stepik.org/lesson/443990/step/9
# Чтение количества учеников
n = int(input())

# Список для хранения всех строк с фамилиями и оценками
students = []

# Считывание данных о учениках
for _ in range(n):
    line = input().strip()
    students.append(line)

# Вывод всех введённых строк
for student in students:
    print(student)

# Пустая строка
print()

# Вывод строк с хорошистами и отличниками
for student in students:
    name, grade = student.rsplit(' ', 1)
    if int(grade) >= 4:
        print(student)
https://stepik.org/lesson/443990/step/15
# Чтение входного значения
n = int(input())

# Начальные значения для последовательности Трибоначчи
tribonacci = [1, 1, 1]

# Генерация последовательности до n элементов
for i in range(3, n):
    next_value = tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3]
    tribonacci.append(next_value)

# Печать первых n элементов последовательности
print(" ".join(map(str, tribonacci[:n])))
